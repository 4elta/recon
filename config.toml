# https://nmap.org/nsedoc/

[cassandra]
patterns = [ '^apani1' ]

  [cassandra.scans.nmap]
  command = 'nmap -Pn -sV  -p {port} --script="banner,(cassandra* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[cups]
patterns = [ '^ipp' ]

  [cups.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(cups* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[distcc]
patterns = [ '^distccd' ]

  [distcc.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,distcc-cve2004-2687" --script-args="distcc-cve2004-2687.cmd=id" -oN "{result_file}" {address}'

[dns]
patterns = [ '^domain' ]

  [dns.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(dns* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

  [dns.scans.dig]
  command = 'dig @{address} version.bind chaos txt 2>&1 | tee "{result_file}"'
  patterns = [ '^version.bind.' ]

[finger]
patterns = [ '^finger' ]

  [finger.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,finger" -oN "{result_file}" {address}'

[ftp]
patterns = [ '^ftp', '^ftp\-data' ]

  [ftp.scans.nmap]
  command = 'nmap -Pn -v -sV -p {port} --script="banner,(ftp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'
  patterns = [ 'Anonymous FTP login allowed' ]

[http]
patterns = [ 'http' ]

  [http.scans.nmap]
  command = 'nmap -Pn -v -sV -p {port} --script="banner,(http* or ssl*) and not (brute or broadcast or dos or external or http-slowloris* or fuzzer)" -oN "{result_file}" {hostname}'
  patterns = [ '[Ss]erver: ([^\n]+)', 'WebDAV is ENABLED' ]

  [http.scans.index]
  command = 'printf "# {scheme}://{hostname}:{port}/\n# %s\n\n" "$(date "+%Y-%m-%d %T %Z")" > "{result_file}"; curl --silent --include --insecure --show-error --max-time 10 {scheme}://{hostname}:{port}/ 2>&1 | tee --append "{result_file}"'
  patterns = [ '(?i)Powered by [^\n]+', '[Ss]erver: [^\n]+' ]

  [http.scans.'robots.txt']
  command = 'curl --silent --include --insecure --show-error --max-time 10 {scheme}://{hostname}:{port}/robots.txt 2>&1 | tee "{result_file}"'

  [http.scans.cewl]
  command = '#cewl --depth 3 --min_word_length 5 --write "{result_file}" {scheme}://{hostname}:{port}'

  [http.scans.nikto]
  command = '#nikto -ask=no -host {scheme}://{hostname}:{port} 2>&1 | tee "{result_file}"'

  [http.scans.feroxbuster]
  command = '#feroxbuster --insecure --quiet --depth 1 --extensions txt,html,php,asp,aspx,jsp --wordlist /usr/share/seclists/Discovery/Web-Content/common.txt --url {scheme}://{hostname}:{port}/ 2>&1 | tee "{result_file}"'

  [http.scans.gobuster]
  command = '#gobuster dir --url {scheme}://{hostname}:{port}/ --wordlist /usr/share/seclists/Discovery/Web-Content/common.txt --no-progress --no-tls-validation --expanded --extensions "txt,html,php,asp,aspx,jsp" 2>&1 | tee "{result_file}"'

  [http.scans.whatweb]
  command = 'whatweb --color=never --no-errors -a 3 -v {scheme}://{hostname}:{port} 2>&1 | tee "{result_file}"'

[imap]
patterns = [ '^imap' ]

  [imap.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(imap* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[isakmp]
patterns = [ '^isakmp' ]

  [isakmp.scans.icke]
  command = 'icke {address} | tee "{result_file}"'
  run_once = true

[kerberos]
patterns = [ '^kerberos', '^kpasswd' ]

  [kerberos.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,krb5-enum-users" -oN "{result_file}" {address}'

[ldap]
patterns = [ '^ldap' ]

  [ldap.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(ldap* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[mongodb]
patterns = [ '^mongod' ]

  [mongodb.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(mongodb* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[mysql]
patterns = [ '^mysql' ]

  [mysql.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(mysql* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[nfs]
patterns = [ '^nfs' ]

  [nfs.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(rpcinfo or nfs*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

  [nfs.scans.showmount]
  command = 'showmount -e {address} 2>&1 | tee "{result_file}"'

[nntp]
patterns = [ '^nntp' ]

  [nntp.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,nntp-ntlm-info" -oN "{result_file}" {address}'

[oracle]
patterns = [ '^oracle' ]

  [oracle.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(oracle* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[pop3]
patterns = [ '^pop3' ]

  [pop3.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(pop3* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[rdp]
patterns = [ '^rdp', '^ms\-wbt\-server', '^ms\-term\-serv' ]

  [rdp.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(rdp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[rmi]
patterns = [ '^java\-rmi', '^rmiregistry' ]

  [rmi.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,rmi-vuln-classloader,rmi-dumpregistry" -oN "{result_file}" {address}'

[rpc]
patterns = [ '^msrpc', '^rpcbind', '^erpc' ]

  [rpc.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,msrpc-enum,rpc-grind,rpcinfo" -oN "{result_file}" {address}'
  run_once = true

  [rpc.scans.rpcinfo]
  command = 'rpcinfo {address} 2>&1 | tee "{result_file}"'
  run_once = true
  patterns = [ 'nfs' ]

[sip]
patterns = [ '^asterisk', '^sip', '^ventrilo' ]

  [sip.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,sip-enum-users,sip-methods" -oN "{result_file}" {address}'

  [sip.scans.svmap]
  command = 'svmap -p {port} {address} 2>&1 | tee "{result_file}"'

[smb]
patterns = [ '^smb', '^microsoft\-ds', '^netbios' ]

  [smb.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(nbstat or smb* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

  [smb.scans.smbclient]
  command = 'smbclient --list={address} --no-pass --command="recurse ON; ls" 2>&1 | tee {result_file}'
  run_once = true

  [smb.scans.'enum4linux-ng']
  command = 'NO_COLOR=yes; enum4linux-ng.py -As -oA {result_file} {address}'
  run_once = true

[smtp]
patterns = [ 'smtp' ]

  [smtp.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(smtp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

[snmp]
patterns = [ '^snmp' ]

  [snmp.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(snmp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'

  [snmp.scans.onesixtyone]
  command = '#onesixtyone -c /usr/share/seclists/Discovery/SNMP/common-snmp-community-strings-onesixtyone.txt -dd {address} 2>&1 | tee "{result_file}"'
  run_once = true

  [snmp.scans.snmpwalk]
  command = '#declare -a OIDs=(1.3.6.1.2.1.25.1.6.0 1.3.6.1.2.1.25.4.2.1.2 1.3.6.1.2.1.25.4.2.1.4 1.3.6.1.2.1.25.2.3.1.4 1.3.6.1.2.1.25.6.3.1.2 1.3.6.1.4.1.77.1.2.25 1.3.6.1.2.1.6.13.1.3); for OID in "${{OIDs[@]}}"; do snmpwalk -c public -v 1 {address} $OID 2>&1 | tee --append "{result_file}"; echo "scanned OID $OID"; done; snmpwalk -c public -v 1 {address} 2>&1 | tee --append "{result_file}"'
  run_once = true
  patterns = [ '^scanned OID (\d+.)*\d+' ]

[ssh]
patterns = [ '^ssh' ]

  [ssh.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,ssh2-enum-algos,ssh-hostkey,ssh-auth-methods" -oN "{result_file}" {address}'

[telnet]
patterns = [ '^telnet' ]

  [telnet.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,telnet-encryption,telnet-ntlm-info" -oN "{result_file}" {address}'

[tls]
patterns = [ 'https', '^ssl\|', '^tls\|' ]

  [tls.scans.testssl]
  command = '#testssl --nodns min --mapping iana --color 0 --warnings batch {hostname}:{port} 2>&1 | tee "{result_file}"'

  [tls.scans.sslscan]
  command = '#sslscan --show-certificate --no-colour {hostname}:{port} 2>&1 | tee "{result_file}"'

  [tls.scans.sslyze]
  command = 'sslyze {hostname}:{port} 2>&1 | tee "{result_file}"'

[tls_opportunistic]
patterns = [ 'ftp', 'pop3', 'nntp', 'imap', 'ldap', 'smtp', 'rdp', 'ms-term-services', 'ms-wbt-server', 'pcoip', 'xmpp', 'postgres', 'mongodb' ]

  [tls_opportunistic.scans.sslyze]
  command = 'sslyze --starttls auto {address}:{port} 2>&1 | tee "{result_file}"'
  
  [tls_opportunistic.scans.testssl]
  command = 'protocol="$(echo {application_protocol}" | cut -d "|" -f2) && testssl --ip one --nodns min --mapping no-openssl --starttls $protocol --color 0 --connect-timeout 90 --openssl-timeout 90 --warnings off {address}:{port} 2>&1 | tee "{result_file}"'

[vnc]
patterns = [ '^vnc' ]

  [vnc.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(vnc* or realvnc* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" --script-args="unsafe=1" -oN "{result_file}" {address}'

[xmpp]
patterns = [ '^xmpp', '^jabber' ]

  [xmpp.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(xmpp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}" {address}'
