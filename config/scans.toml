# the variables defined in this group can be used in `command` declarations.
# e.g. command = 'echo "hello {username} from {domain}! your password is {password}" > "{result_file}.log"'
['*']
domain = "example.com"
username = "user"
password = "password"

# documentation on the Nmap Script Engine:
# https://nmap.org/nsedoc/

[cassandra]
patterns = [ 'apani1' ]

  [cassandra.scans.nmap]
  command = 'nmap -Pn -sV  -p {port} --script="banner,(cassandra* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[cups]
patterns = [ 'ipp' ]

  [cups.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(cups* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[distcc]
patterns = [ '^distccd' ]

  [distcc.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,distcc-cve2004-2687" --script-args="distcc-cve2004-2687.cmd=id" -oN "{result_file}.log" {address}'

[dns]
patterns = [ '^domain' ]

  [dns.scans.nase]
  command = '"{PATH_TO_SCANNERS}/nase.py" --port {port} --transport_protocol {transport_protocol} --json "{result_file}.json" {address} 2>&1 | tee "{result_file}.log"'

[finger]
patterns = [ '^finger' ]

  [finger.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,finger" -oN "{result_file}.log" {address}'

[ftp]
patterns = [ 'ftp', 'ftp\-data' ]

  [ftp.scans.nmap]
  command = 'nmap -Pn -v -sV -p {port} --script="banner,(ftp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oX "{result_file}.xml" -oN "{result_file}.log" {address}'
  patterns = [ 'Anonymous FTP login allowed' ]

[http]
patterns = [ 'http' ]

  [http.scans.nmap]
  command = 'nmap -Pn -v -sV -p {port} --script="banner,ssl-cert,http* and not (brute or broadcast or dos or external or http-slowloris* or fuzzer)" -oN "{result_file}.log" -oX "{result_file}.xml" {hostname}'
  patterns = [ '[Ss]erver: ([^\n]+)', 'WebDAV is ENABLED' ]

  [http.scans.index]
  command = 'printf "# {scheme}://{hostname}:{port}/\n# %s\n\n" "$(date "+%Y-%m-%d %T %Z")" > "{result_file}.log"; curl --silent --include --insecure --show-error --max-time 10 {scheme}://{hostname}:{port}/ 2>&1 | tee --append "{result_file}.log"'
  patterns = [ '(?i)Powered by [^\n]+', '[Ss]erver: [^\n]+' ]

  [http.scans.'robots.txt']
  command = 'curl --silent --include --insecure --show-error --max-time 10 {scheme}://{hostname}:{port}/robots.txt 2>&1 | tee "{result_file}.log"'

  [http.scans.cewl]
  command = '#cewl --depth 3 --min_word_length 5 --write "{result_file}.log" {scheme}://{hostname}:{port}'

  [http.scans.nikto]
  command = 'nikto -ask no -Cgidirs all -host {hostname} -port {port} -nointeractive -Format json -output "{result_file}.json" 2>&1 | tee "{result_file}.log"'

  [http.scans.feroxbuster]
  command = '#feroxbuster --insecure --quiet --depth 1 --extensions txt,html,php,asp,aspx,jsp --wordlist /usr/share/seclists/Discovery/Web-Content/common.txt --url {scheme}://{hostname}:{port}/ 2>&1 | tee "{result_file}.log"'

  [http.scans.gobuster]
  command = '#gobuster dir --url {scheme}://{hostname}:{port}/ --wordlist /usr/share/seclists/Discovery/Web-Content/common.txt --no-progress --no-tls-validation --expanded --extensions "txt,html,php,asp,aspx,jsp" 2>&1 | tee "{result_file}.log"'

  [http.scans.whatweb]
  command = 'whatweb --aggression=3 --no-errors --log-verbose="{result_file}.log" --log-json="{result_file}.json" {scheme}://{hostname}:{port}'

[imap]
patterns = [ 'imap' ]

  [imap.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(imap* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[isakmp]
patterns = [ 'isakmp' ]

  [isakmp.scans.ike]
  command = '"{PATH_TO_SCANNERS}/ike.sh" {address} | tee "{result_file}.log"'
  run_once = true

  [isakmp.scans.nmap]
  command = 'nmap -sU -Pn -sV -p {port} --script="banner,ike-version" -oN "{result_file}.log" {address}'

[kerberos]
patterns = [ '^kerberos', '^kpasswd' ]

  [kerberos.scans.nmap]
  command = 'nmap -sT -sU -Pn -sV -p {port} --script="banner,krb5-enum-users" -oN "{result_file}.log" {address}'

[ldap]
patterns = [ 'ldap' ]

  [ldap.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(ldap* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[mongodb]
patterns = [ 'mongod' ]

  [mongodb.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(mongodb* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[mysql]
patterns = [ 'mysql' ]

  [mysql.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(mysql* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[nfs]
patterns = [ '^nfs' ]

  [nfs.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(rpcinfo or nfs*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[nntp]
patterns = [ '^nntp' ]

  [nntp.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,nntp-ntlm-info" -oN "{result_file}.log" {address}'

[ntp]
patterns = [ '^ntp' ]

  [ntp.scans.nmap]
  command = 'nmap -sT -sU -Pn -sV -p {port} --script="banner,ntp-info,ntp-monlist" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[oracle]
patterns = [ 'oracle' ]

  [oracle.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(oracle* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[pop3]
patterns = [ 'pop3' ]

  [pop3.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(pop3* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[rdp]
patterns = [ 'rdp', 'ms-wbt-server', 'ms-term-serv' ]

  [rdp.scans.nmap]
  command = 'nmap -sT -sU -Pn -sV -p {port} --script="banner,(rdp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oX "{result_file}.xml" -oN "{result_file}.log" {address}'

[rmi]
patterns = [ '^java\-rmi', '^rmiregistry' ]

  [rmi.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,rmi-vuln-classloader,rmi-dumpregistry" -oN "{result_file}.log" {address}'

[rpc]
patterns = [ '^msrpc', '^rpcbind', '^erpc' ]

  [rpc.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,msrpc-enum,rpc-grind,rpcinfo" -oN "{result_file}.log" {address}'
  run_once = true

  [rpc.scans.rpcinfo]
  command = 'rpcinfo {address} 2>&1 | tee "{result_file}.log"'
  run_once = true
  patterns = [ 'nfs' ]

[sip]
patterns = [ '^asterisk', '^sip', '^ventrilo' ]

  [sip.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,sip-enum-users,sip-methods" -oN "{result_file}.log" {address}'

  [sip.scans.svmap]
  command = 'svmap -p {port} {address} 2>&1 | tee "{result_file}.log"'

[smb]
patterns = [ 'smb', 'microsoft-ds', 'netbios' ]

  [smb.scans.nmap]
  command = 'nmap -sT -sU -Pn -sV -p {port} --script="banner,(nbstat or smb* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

  [smb.scans.smbclient]
  command = 'smbclient --list={address} --no-pass --command="recurse ON; ls" 2>&1 | tee {result_file}.log'
  run_once = true

  [smb.scans.'enum4linux-ng']
  command = 'enum4linux-ng.py -As -oJ "{result_file}" {address} 2>&1 | tee {result_file}.log'
  run_once = true

[smtp]
patterns = [ 'smtp' ]

  [smtp.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(smtp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

[snmp]
patterns = [ 'snmp' ]

  [snmp.scans.nmap]
  command = 'nmap -sT -sU -Pn -sV -p {port} --script="banner,(snmp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'

  [snmp.scans.onesixtyone]
  command = '#onesixtyone -c /usr/share/seclists/Discovery/SNMP/common-snmp-community-strings-onesixtyone.txt -dd {address} 2>&1 | tee "{result_file}.log"'
  run_once = true

  [snmp.scans.snmpwalk]
  command = '#declare -a OIDs=(1.3.6.1.2.1.25.1.6.0 1.3.6.1.2.1.25.4.2.1.2 1.3.6.1.2.1.25.4.2.1.4 1.3.6.1.2.1.25.2.3.1.4 1.3.6.1.2.1.25.6.3.1.2 1.3.6.1.4.1.77.1.2.25 1.3.6.1.2.1.6.13.1.3); for OID in "${{OIDs[@]}}"; do snmpwalk -c public -v 1 {address} $OID 2>&1 | tee --append "{result_file}.log"; echo "scanned OID $OID"; done; snmpwalk -c public -v 1 {address} 2>&1 | tee --append "{result_file}.log"'
  run_once = true
  patterns = [ '^scanned OID (\d+.)*\d+' ]

[ssh]
patterns = [ '^ssh' ]

  [ssh.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,sshv1,ssh2-enum-algos,ssh-hostkey,ssh-auth-methods" -oN "{result_file}.log" -oX "{result_file}.xml" {address}'

[telnet]
patterns = [ '^telnet' ]

  [telnet.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,telnet-encryption,telnet-ntlm-info" -oN "{result_file}.log" {address}'

[tls]
patterns = [
  '^ssl\|', '^tls\|', 'https',
  'imap', 'ldap', 'nntp', 'pop3', 'smtp', # these services have dedicated TLS ports (i.e. w/o STARTTLS)
]

  [tls.scans.sslscan]
  command = '#sslscan --show-certificate --ocsp --show-sigs --xml="{result_file}.xml" {hostname}:{port} 2>&1 | tee "{result_file}.log"'

  [tls.scans.sslyze]
  command = '#sslyze --json_out "{result_file}.json" {hostname}:{port} 2>&1 | tee "{result_file}.log"'

  [tls.scans.testssl]
  command = 'testssl --ip one --nodns min --mapping no-openssl --warnings off --connect-timeout 60 --openssl-timeout 60 --logfile "{result_file}.log" --jsonfile "{result_file}.json" {hostname}:{port}'

[tls_opportunistic] # e.g. STARTTLS
patterns = [ 'ftp', 'imap', 'irc', 'ldap', 'pop3', 'smtp', 'lmtp', 'mysql', 'nntp', 'postgres', 'rdp', 'ms-wbt-server', 'ms-term-serv', 'telnet', 'xmpp']

  [tls_opportunistic.scans.sslscan]
  command = '#echo "ftp imap irc ldap pop3 smtp mysql xmpp" | grep --quiet "{application_protocol}" && sslscan --show-certificate --show-sigs --starttls-{application_protocol} --xml="{result_file}.xml" {address}:{port} 2>&1 | tee "{result_file}.log"'

  [tls_opportunistic.scans.sslyze]
  command = '#echo "smtp, xmpp, xmpp_server, pop3, imap, ftp, ldap, rdp, postgres" | grep --quiet "{application_protocol}" && sslyze --starttls {application_protocol} --json_out "{result_file}.json" {address}:{port} 2>&1 | tee "{result_file}.log"'

  [tls_opportunistic.scans.testssl]
  command = 'echo "ftp, smtp, pop3, imap, xmpp, telnet, ldap, irc, lmtp, nntp, postgres, mysql" | grep --quiet "{application_protocol}" && testssl --ip one --nodns min --mapping no-openssl --warnings off --connect-timeout 60 --openssl-timeout 60 --starttls {application_protocol} --logfile "{result_file}.log" --jsonfile "{result_file}.json" {address}:{port}'

[vnc]
patterns = [ 'vnc' ]

  [vnc.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(vnc* or realvnc* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" --script-args="unsafe=1" -oN "{result_file}.log" {address}'

[xmpp]
patterns = [ 'xmpp', 'jabber' ]

  [xmpp.scans.nmap]
  command = 'nmap -Pn -sV -p {port} --script="banner,(xmpp* or ssl*) and not (brute or broadcast or dos or external or fuzzer)" -oN "{result_file}.log" {address}'
